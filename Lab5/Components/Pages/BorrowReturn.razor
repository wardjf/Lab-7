@page "/BorrowReturn"
@inject ILibraryService LibraryService
@using Lab5.Models


<h3>Borrow / Return Books</h3>

<div class="container mt-4">
    <!-- User Selection Section to View Borrowed Books (Moved to the top) -->
    <h4>Select a User to View Borrowed Books</h4>
    <select class="form-select mb-3" @bind="selectedUserForView">
        <option value="">Select User</option>
        @foreach (var user in users)
        {
            <option value="@user.Id">@user.Id - @user.Name (@user.Email)</option>
        }
    </select>

    <!-- Button to Confirm User Selection -->
    <button class="btn btn-primary mt-2" @onclick="LoadBorrowedBooksByUser">Confirm User</button>

    <!-- Display Borrowed Books of Selected User -->
    @if (selectedUserForView != 0 && borrowedBooksBySelectedUser.Count > 0)
    {
        <h5>Books Borrowed by @selectedUser?.Name</h5>
        <ul class="list-group">
            @foreach (var book in borrowedBooksBySelectedUser)
            {
                <li class="list-group-item">
                    @book.Title - @book.Author
                </li>
            }
        </ul>
    }
    else if (selectedUserForView != 0)
    {
        <p>No books borrowed by this user.</p>
    }

    <!-- Available Books Section -->
    <h4 class="mt-5">Available Books</h4>

    @if (!books.Any())
    {
        <p>No books available.</p>
    }
    else
    {
        @foreach (var book in books)
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                <!-- Left-aligned: Borrow button and Book info -->
                <div class="d-flex align-items-center w-100">
                    <!-- Borrow Button (left aligned) -->
                    @if (book.BorrowedBy == null)
                    {
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => OnBorrowClick(book.Id)">Borrow</button>
                    }

                    <!-- Book Information (Title and Author) (left aligned) -->
                    <div class="d-flex flex-column ms-2">
                        <span><strong>@book.Title</strong></span>
                        <span>@book.Author</span>
                    </div>
                </div>

                <!-- Right-aligned: Return button for borrowed books -->
                <div>
                    @if (book.BorrowedBy != null)
                    {
                        <button class="btn btn-secondary btn-sm" @onclick="() => OnReturnClick(book.Id)">Return</button>
                    }
                </div>
            </div>

            <!-- User selection for Borrow -->
            @if (selectedBookId == book.Id && book.BorrowedBy == null)
            {
                <div class="mt-2">
                    <select class="form-select" @bind="selectedUserId">
                        <option value="">Select User</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.Id - @user.Name (@user.Email)</option>
                        }
                    </select>
                    <button class="btn btn-success btn-sm mt-2" @onclick="() => BorrowBook(book.Id)">Confirm Borrow</button>
                </div>
            }
        }
    }

    <!-- Borrowed Books Section -->
    <h4 class="mt-5">Borrowed Books</h4>
    @if (!borrowedBooks.Any())
    {
        <p>No books are currently borrowed.</p>
    }
    else
    {
        @foreach (var book in borrowedBooks)
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                <!-- Book Information (left aligned) -->
                <div class="d-flex align-items-center w-100">
                    <div class="d-flex flex-column ms-2">
                        <span><strong>@book.Title</strong></span>
                        <span>@book.Author</span>
                    </div>
                </div>

                <!-- Return button (right aligned) -->
                <div>
                    <button class="btn btn-secondary btn-sm" @onclick="() => OnReturnClick(book.Id)">Return</button>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Book> books;
    private List<User> users;
    private List<Book> borrowedBooks = new List<Book>(); // List to track borrowed books
    private List<Book> borrowedBooksBySelectedUser = new List<Book>(); // Books borrowed by selected user for view
    private int selectedBookId;
    private int selectedUserId;
    private int selectedUserForView;

    protected override void OnInitialized()
    {
        books = LibraryService.GetBooks();
        users = LibraryService.GetUsers();
    }

    private void OnBorrowClick(int bookId)
    {
        selectedBookId = bookId;
    }

    private void OnReturnClick(int bookId)
    {
        var book = books.FirstOrDefault(b => b.Id == bookId);
        if (book != null && book.BorrowedBy != null)
        {
            // Return book logic
            LibraryService.ReturnBook(bookId);
            books = LibraryService.GetBooks(); // Refresh book list
            borrowedBooks = borrowedBooks.Where(b => b.Id != bookId).ToList(); // Remove from borrowed list
        }
    }

    private void BorrowBook(int bookId)
    {
        if (selectedUserId > 0)
        {
            var success = LibraryService.BorrowBook(bookId, selectedUserId);
            if (success)
            {
                var book = books.FirstOrDefault(b => b.Id == bookId);
                if (book != null)
                {
                    borrowedBooks.Add(book); // Add to borrowed list
                    books = LibraryService.GetBooks(); // Refresh available books list
                }
            }
        }
    }

    private void LoadBorrowedBooksByUser()
    {
        // Ensure books are filtered only for the selected user
        if (selectedUserForView != 0)
        {
            borrowedBooksBySelectedUser = books.Where(b => b.BorrowedBy?.Id == selectedUserForView).ToList();
        }
        else
        {
            borrowedBooksBySelectedUser.Clear();
        }
    }

    private User selectedUser => users.FirstOrDefault(u => u.Id == selectedUserId);
}


